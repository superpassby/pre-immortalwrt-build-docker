name: Matrix Docker Build and Release

on:
  workflow_dispatch:  # 手动触发
  # schedule:
  #   - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  Building:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #version: [immortalwrt, openwrt, lede, lienol]
        version: [openwrt]
        platform: [x86_64]
        branch: [openwrt-24.10]
    outputs:
      version: ${{ matrix.version }}
      branch: ${{ env.branch }}
      platform: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine branch
        id: set_branch
        run: |
          if [[ "${{ matrix.version }}" == "immortalwrt" || "${{ matrix.version }}" == "openwrt" ]]; then
            echo "branch=${{ matrix.branch }}" >> $GITHUB_ENV
          elif [[ "${{ matrix.version }}" == "lede" ]]; then
            if [[ "${{ matrix.branch }}" == "openwrt-24.10" ]]; then
              echo "branch=master" >> $GITHUB_ENV
            else
              exit 0
            fi
          elif [[ "${{ matrix.version }}" == "lienol" ]]; then
            branch_name=$(echo "${{ matrix.branch }}" | sed 's/^openwrt-//')
            echo "branch=${branch_name}" >> $GITHUB_ENV
          fi

      - name: 查看机器配置  
        run: |  
          echo "警告⚠"  
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"  
          echo -e "CPU性能排序: 7763 > 8370C > 8272CL > 8171M > E5-2673\n"  
          echo "--------------------------CPU信息--------------------------"  
          echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"  
          echo "CPU核心数量: $(nproc)"  
          echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"  
          echo "--------------------------内存信息--------------------------"  
          echo "已安装内存详细信息:"  
          echo -e "$(sudo lshw -short -C memory | grep GiB)\n"  
          echo "--------------------------硬盘信息--------------------------"  
          echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT  
      
      - name: "Optimize Disk Space"
        uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
        with:
          operate_sudo: "True"
          general_include: ".+"
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True" 
      
      - name: Show disk space
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      - name: Copy Files
        run: |
          git clone --depth 1 https://github.com/passbysuper/Build-openwrt-in-docker
          cp ./Build-openwrt-in-docker/${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diffconfig ./
          cp ./Build-openwrt-in-docker/${{ matrix.version }}/${{ env.branch }}/${{ matrix.platform }}/diy.sh ./
          echo "=============================================================================="
          echo "当前目录文件"
          ls
          echo "=============================================================================="
          
      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} -f ./${{ matrix.version }}/${{ env.branch }}_${{ matrix.platform }}_Dockerfile .

      - name: Save Docker image to a tar file
        run: |
          docker save ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} | gzip > ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
          ls -lh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz


      - name: Split the tar file into smaller chunks
        run: |
          sudo apt-get install -y p7zip-full
          7z a -v1024m ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.7z ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
          ls -lh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz*

      - name: Show disk space
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      
      - name: Upload artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}_artifacts
          path: |
            ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.7z*
          compression-level: 0  # 禁用压缩


  Release:
    needs: Building
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: List files in ./artifacts
        #if: false  # 跳过该步骤
        if: true  # 该步骤会执行
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
  
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: ./artifacts/

      - name: List files in ./artifacts
        #if: false  # 跳过该步骤
        if: true  # 该步骤会执行
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
          
      - name: Unzip all artifact files
        run: |
          # 解压 ./artifacts/ 目录及其子目录中的所有 .zip 文件
          shopt -s globstar  # 开启 globstar 以支持 ** 递归匹配
          for zip_file in ./artifacts/**/*.zip; do
            if [[ -f "$zip_file" ]]; then
              echo "Unzipping $zip_file..."
              unzip "$zip_file" -d ./artifacts/  # 解压到 ./artifacts/ 目录
              rm "$zip_file"  # 删除 .zip 文件
            fi
          done

          
      - name: List files in ./artifacts
        #if: false  # 跳过该步骤
        if: true  # 该步骤会执行
        run: |
          echo "Show disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
  
      - name: Create Git tag
        id: create_tag
        run: |
          # 设置标签名
          TAG_NAME="发布时间(UTC+8)：$(TZ="Asia/Shanghai" date +'%Y.%m.%d-%H_%M')"
          RELEASE_NAME="发布时间(UTC+8)：$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M')"
          
          # 输出标签名和发布名
          echo "TAG_NAME=${TAG_NAME}"
          echo "RELEASE_NAME=${RELEASE_NAME}"

          # 将标签名和发布名传递给后续步骤
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
          
          # 配置 Git 用户
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 创建标签
          git tag $TAG_NAME

          # 推送标签到远程仓库
          git push origin $TAG_NAME
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} $TAG_NAME          

      - name: Set up GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.RELEASE_NAME }}
          files: ./artifacts/**/*  # 递归匹配所有文件
          body: "Release with multiple builds"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             
      - name: Delete old workflow runs
        run: |
          echo "Deleting old workflow runs..."
          WORKFLOW_RUNS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs")
          RUN_IDS=$(echo $WORKFLOW_RUNS | jq '.workflow_runs | sort_by(.created_at) | reverse | .[3:] | .[].id')
          for RUN_ID in $(echo $RUN_IDS); do
            echo "Deleting workflow run: $RUN_ID"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID"
          done

      - name: Delete old releases
        run: |
          echo "Deleting old releases..."
          RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
          RELEASE_IDS=$(echo $RELEASES | jq '. | sort_by(.created_at) | reverse | .[3:] | .[].id')
          for RELEASE_ID in $(echo $RELEASE_IDS); do
            RELEASE_NAME=$(echo $RELEASES | jq -r ".[] | select(.id == $RELEASE_ID) | .name")
            echo "Deleting release: $RELEASE_NAME"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          done

      - name: Delete old tags
        run: |
          echo "Deleting old tags..."
          TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/tags")
          TAG_NAMES=$(echo $TAGS | jq -r '.[] | {name: .name, date: (.name | match("[0-9]{4}.[0-9]{2}.[0-9]{2}-[0-9]{2}_[0-9]{2}") | .string)} | select(.date != null) | .name' | sort)
          TAG_NAMES=$(echo "$TAG_NAMES" | head -n -3)
          for TAG_NAME in $(echo "$TAG_NAMES"); do
            echo "Deleting tag: $TAG_NAME"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$TAG_NAME"
          done

      - name: Delete all files in ./artifacts
        #if: false  # 跳过该步骤
        if: true  # 该步骤会执行
        run: |
          echo "Deleting all files in ./artifacts..."
          rm -rf ./artifacts/*
