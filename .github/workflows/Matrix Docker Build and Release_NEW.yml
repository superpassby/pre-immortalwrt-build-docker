
name: Matrix Docker Build and Release

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  Building:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        #version: [immortalwrt, openwrt, lede, Lienol]
        #version: [immortalwrt, openwrt]
        version: [immortalwrt, openwrt, lede, Lienol]
        platform: [x86_64]
        #branch: [openwrt-24.10, openwrt-23.10]  # 默认分支
        branch: [openwrt-24.10]
        # 如果 version 为 lede，默认分支将是 main，稍后调整
       
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Determine branch
      id: set_branch
      run: |
        if [[ "${{ matrix.version }}" == "immortalwrt" || "${{ matrix.version }}" == "openwrt" ]]; then
          echo "branch=${{ matrix.branch }}" >> $GITHUB_ENV
        elif [[ "${{ matrix.version }}" == "lede" ]]; then
          if [[ "${{ matrix.branch }}" == "openwrt-24.10" ]]; then
            echo "branch=master" >> $GITHUB_ENV
          else
            exit 0
          fi
        elif [[ "${{ matrix.version }}" == "Lienol" ]]; then
          # Remove the "openwrt-" prefix if it's present
          branch_name=$(echo "${{ matrix.branch }}" | sed 's/^openwrt-//')
          echo "branch=${branch_name}" >> $GITHUB_ENV
        fi
    
    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

 
    
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      #if: false  # 跳过该步骤
      #if: true  # 该步骤会执行
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        # 输出当前目录内容
        echo "Listing current directory:"
        ls
        echo "Listing ./${{ matrix.version }}/ directory:"
        ls ./${{ matrix.version }}/
        echo "Listing the Dockerfile path:"
        ls ./${{ matrix.version }}/${{ env.branch }}_${{ matrix.platform }}_Dockerfile
        # 进行 Docker 构建
        docker build -t ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} -f ./${{ matrix.version }}/${{ env.branch }}_${{ matrix.platform }}_Dockerfile .

    - name: Save Docker image to a tar file
      run: |
        echo "执行 docker images"
        docker images
        echo "执行docker save ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}..."
        docker save ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }} | gzip > ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
        echo "执行 ls -lh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz"
        ls -lh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz

    - name: Split the tar file into smaller chunks
      run: |
        7z a -v1024m ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.7z ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz
        ls -lh ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.*

#jobs:
#  build_and_release:
#    runs-on: ubuntu-latest

    - name: Create Git tag
      id: create_tag  # 给步骤添加一个 id
      run: |
         TAG_NAME="发布时间（UTC）：$(date +'%Y.%m.%d-%H_%M')"  # 基于当前年、月、日、小时、分钟生成唯一标签
         echo "TAG_NAME=${TAG_NAME}"  # 显示标签名
         git tag $TAG_NAME  # 创建新的 Git 标签
         git push origin $TAG_NAME  # 推送标签到远程仓库
         git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/superpassby/Build-openwrt-in-docker-pre $TAG_NAME  # 使用 PAT 推送标签
         echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV  # 将标签名存储在环境变量中，供后续步骤使用
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker parts to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
          tag_name: ${{ env.TAG_NAME }}  # 从环境变量中获取标签名
          files: |
              ${{ matrix.version }}_${{ env.branch }}_${{ matrix.platform }}.tar.gz.*
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




