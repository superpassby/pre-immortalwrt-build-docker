name: Docker Build and Release

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -y update
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
#       sudo timedatectl set-timezone "$TZ"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t pre-immortalwrt-build-docker .

    - name: Save Docker image to a tar file
      run: |
        echo "执行 docker images"
        docker images
        echo "执行docker save pre-immortalwrt-build-docker..."
        docker save pre-immortalwrt-build-docker | gzip > pre-immortalwrt-build-docker.tar.gz
        echo "执行 ls -lh pre-immortalwrt-build-docker.tar.gz"
        ls -lh pre-immortalwrt-build-docker.tar.gz

    - name: Split the tar file into smaller chunks
      run: |
        split -b 1024m pre-immortalwrt-build-docker.tar.gz "pre-immortalwrt-build-docker_part_"
        ls -lh pre-immortalwrt-build-docker_part_*

    - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.$(date +%Y%m%d%H%M%S)  # 使用时间戳生成唯一的标签
           release_name: "Docker Image Release"
           body: "Release of pre-immortalwrt-build-docker image"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker image parts to GitHub release
      run: |
        # Get the list of files that match the pattern
        file_list=$(ls pre-immortalwrt-build-docker_part_* || true)

        # If there is more than one part, loop over each part and upload them
        if [ $(echo "$file_list" | wc -l) -gt 1 ]; then
          for part in $file_list; do
            echo "Uploading $part"
            curl -XPOST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/gzip" \
              --data-binary @"$part" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $part)"
          done
        else
          # If only one part exists, upload it directly
          part=$(echo "$file_list")
          echo "Uploading single part $part"
          curl -XPOST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @"$part" \
            "${{ steps.create_release.outputs.upload_url }}?name=$(basename $part)"
        fi
