name: Docker Build and Release

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

 
    
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      if: false  # 跳过该步骤
      #if: true  # 该步骤会执行
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t pre-immortalwrt-build-docker .

    - name: Save Docker image to a tar file
      run: |
        echo "执行 docker images"
        docker images
        echo "执行docker save pre-immortalwrt-build-docker..."
        docker save pre-immortalwrt-build-docker | gzip > pre-immortalwrt-build-docker.tar.gz
        echo "执行 ls -lh pre-immortalwrt-build-docker.tar.gz"
        ls -lh pre-immortalwrt-build-docker.tar.gz

    - name: Split the tar file into smaller chunks
      run: |
        7z a -v1024m pre-immortalwrt-build-docker.tar.gz.7z pre-immortalwrt-build-docker.tar.gz
        ls -lh pre-immortalwrt-build-docker.*

#jobs:
#  build_and_release:
#    runs-on: ubuntu-latest

    - name: Create Git tag
      id: create_tag  # 给步骤添加一个 id
      run: |
         TAG_NAME="x86_64_$(date +'%Y.%m.%d-%H_%M')"  # 基于当前年、月、日、小时、分钟生成唯一标签
         echo "TAG_NAME=${TAG_NAME}"  # 显示标签名
         git tag $TAG_NAME  # 创建新的 Git 标签
         git push origin $TAG_NAME  # 推送标签到远程仓库
         git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/superpassby/pre-immortalwrt-build-docker $TAG_NAME  # 使用 PAT 推送标签
         echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV  # 将标签名存储在环境变量中，供后续步骤使用
      env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Docker parts to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
          tag_name: ${{ env.TAG_NAME }}  # 从环境变量中获取标签名
          files: |
              pre-immortalwrt-build-docker.tar.gz.*
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete old workflow runs
      run: |
        echo "Deleting old workflow runs..."
        WORKFLOW_RUNS=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/actions/runs")
        RUN_IDS=$(echo $WORKFLOW_RUNS | jq '.workflow_runs | sort_by(.created_at) | reverse | .[3:] | .[].id')
        for RUN_ID in $(echo $RUN_IDS); do
          echo "Deleting workflow run: $RUN_ID"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/actions/runs/$RUN_ID"
        done

    - name: Delete old releases
      if: false  # 跳过该步骤
      run: |
        echo "Deleting old releases..."
        RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases")
        RELEASE_IDS=$(echo $RELEASES | jq '. | sort_by(.created_at) | reverse | .[3:] | .[].id')
        for RELEASE_ID in $(echo $RELEASE_IDS); do
          echo "Deleting release: $RELEASE_ID"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/$RELEASE_ID"
        done

    - name: Delete old releases and associated tags
      run: |
        echo "Deleting old releases and associated tags..."

        # 获取所有 Releases
        RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases")

        # 提取 Release ID 和标签名
        RELEASE_IDS=$(echo $RELEASES | jq '. | sort_by(.created_at) | reverse | .[3:] | .[].id')
        TAG_NAMES=$(echo $RELEASES | jq '. | sort_by(.created_at) | reverse | .[3:] | .[].tag_name')

        # 删除 Release 和标签
        for RELEASE_ID in $(echo $RELEASE_IDS); do
          RELEASE_ID=$(echo $RELEASE_ID | tr -d '"')  # 去掉多余的引号
          TAG_NAME=$(echo $TAG_NAMES | jq -r ".[] | select(. == \"${RELEASE_ID}\")")
          echo "Deleting Release: $RELEASE_ID with tag: $TAG_NAME"
      
          # 删除 Release
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
          "https://api.github.com/repos/superpassby/pre-immortalwrt-build-docker/releases/$RELEASE_ID"
      
          # 删除 Git 标签
          git tag -d $TAG_NAME  # 删除本地标签
          git push --delete origin $TAG_NAME  # 删除远程标签
        done
