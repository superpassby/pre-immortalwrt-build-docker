name: Docker Build and Release

on:
  # 手动触发
  workflow_dispatch:

  # 定时触发 (例如每天凌晨 1 点触发)
#  schedule:
#    - cron: '0 1 * * *'  # 每天凌晨 1 点 UTC，按需求调整时间

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@main

    - name: Check Server Performance
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -y update
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
#       sudo timedatectl set-timezone "$TZ"

    - name: Show disk space
      run: |
        echo "Show disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t pre-immortalwrt-build-docker .

    - name: Save Docker image to a tar file
      run: |
        docker save pre-immortalwrt-build-docker | gzip > pre-immortalwrt-build-docker.tar.gz

    - name: Split the tar file into smaller chunks
      run: |
        split -b 1024m pre-immortalwrt-build-docker.tar.gz "pre-immortalwrt-build-docker_part_"

    - name: Upload Docker image parts as artifacts
      uses: actions/upload-artifact@main
      with:
        name: docker-image-parts
        path: pre-immortalwrt-build-docker_part_*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@main

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@main
        with:
          tag_name: v1.0.0  # 在此填写您的版本号，根据需要修改
          release_name: "Docker Image Release"  # 发布名称
          body: "Release of pre-immortalwrt-build-docker image"  # 发布说明
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Show disk space
        run: |
          echo "Show files"
          echo "=============================================================================="
          echo "pwd============================================================="
          pwd
          echo "ls /home/runner/work/pre-immortalwrt-build-docker/pre-immortalwrt-build-docker============================================================="
          ls /home/runner/work/pre-immortalwrt-build-docker/pre-immortalwrt-build-docker
          echo "ls /home/runner/work/pre-immortalwrt-build-docker============================================================="
          ls /home/runner/work/pre-immortalwrt-build-docker
          echo "ls /home/runner/work============================================================="
          ls /home/runner/work
          echo "ls -lh============================================================="
          ls -lh
          echo "==============================================================================" 

      - name: Upload image parts to GitHub release
        uses: actions/upload-release-asset@v1  # 使用官方上传 release 资产的动作
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: pre-immortalwrt-build-docker_part_*
          asset_name: ${{ github.run_id }}-pre-immortalwrt-build-docker_part.tar.gz
          asset_content_type: application/gzip
